import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;
import java.util.List;

public class JSONComparatorTest {

    @Test
    public void testJsonEquality() throws JsonProcessingException {
        // Create the first JSON object
        String json1 = "{ \"name\": \"John\", \"age\": 25, \"address\": { \"city\": \"New York\", \"state\": \"NY\" }, \"hobbies\": [\"reading\", \"running\"] }";

        // Create the second JSON object
        String json2 = "{ \"name\": \"John\", \"age\": 30, \"address\": { \"city\": \"New York\", \"state\": \"CA\" }, \"hobbies\": [\"reading\", \"swimming\"] }";

        // Fields to ignore during comparison
        List<String> ignoreFields = Arrays.asList("age", "address/state");

        // Assert the equality of the two JSON objects and print the differences
        assertJsonEquality(json1, json2, ignoreFields);
    }

    private void assertJsonEquality(String json1, String json2, List<String> ignoreFields) throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        JsonNode node1 = mapper.readTree(json1);
        JsonNode node2 = mapper.readTree(json2);

        compareJsonNodes(node1, node2, "", ignoreFields);
    }

    private void compareJsonNodes(JsonNode node1, JsonNode node2, String currentPath, List<String> ignoreFields) {
        if (node1.equals(node2)) {
            return; // JSON nodes are equal
        }

        if (node1.isObject() && node2.isObject()) {
            ObjectNode objectNode1 = (ObjectNode) node1;
            ObjectNode objectNode2 = (ObjectNode) node2;

            objectNode1.fieldNames().forEachRemaining(fieldName -> {
                if (!ignoreFields.contains(currentPath + "/" + fieldName)) {
                    JsonNode fieldNode1 = objectNode1.get(fieldName);
                    JsonNode fieldNode2 = objectNode2.get(fieldName);

                    String fieldPath = currentPath + "/" + fieldName;
                    compareJsonNodes(fieldNode1, fieldNode2, fieldPath, ignoreFields);
                }
            });
        } else if (node1.isArray() && node2.isArray()) {
            ArrayNode arrayNode1 = (ArrayNode) node1;
            ArrayNode arrayNode2 = (ArrayNode) node2;

            if (arrayNode1.size() != arrayNode2.size()) {
                System.out.println("Difference: Array size mismatch at path " + currentPath);
                return;
            }

            for (int i = 0; i < arrayNode1.size(); i++) {
                compareJsonNodes(arrayNode1.get(i), arrayNode2.get(i), currentPath + "[" + i + "]", ignoreFields);
            }
        } else {
            System.out.println("Difference at path " + currentPath + ": " + node1 + " vs " + node2);
        }
    }
}
