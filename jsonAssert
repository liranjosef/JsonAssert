package petStore.testsBase;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.tools.ant.util.FileUtils;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class JSONComparatorTest {

    SoftAssert softAssert = new SoftAssert();

    @Test
    public void testJsonEquality() throws IOException {
        // Create the first JSON object
        String json1 = new String(Files.readAllBytes(Paths.get("src/test/java/petStore/testsBase/json1.json")));
        String json2 = new String(Files.readAllBytes(Paths.get("src/test/java/petStore/testsBase/json2.json")));
        // Create the second JSON object

        // Assert the equality of the two JSON objects and print the differences
        assertJsonEquality(json1, json2);
        softAssert.assertAll();
    }

    private void assertJsonEquality(String json1, String json2) throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        JsonNode node1 = mapper.readTree(json1);
        JsonNode node2 = mapper.readTree(json2);

        compareJsonNodes(node1, node2, "");
    }

    private void compareJsonNodes(JsonNode node1, JsonNode node2, String currentPath) {
        if (node1.equals(node2)) {
            return; // JSON nodes are equal
        }

        if (node1.isObject() && node2.isObject()) {
            ObjectNode objectNode1 = (ObjectNode) node1;
            ObjectNode objectNode2 = (ObjectNode) node2;

            Set<String> fieldNames1 = new HashSet<>();
            Set<String> originalFieldNames1 = new HashSet<>();
            objectNode1.fieldNames().forEachRemaining(fieldNames1::add);
            objectNode1.fieldNames().forEachRemaining(originalFieldNames1::add);// Store a copy of the field name


            Set<String> fieldNames2 = new HashSet<>();
            objectNode2.fieldNames().forEachRemaining(fieldNames2::add);

            fieldNames1.removeAll(fieldNames2);

            if (!fieldNames1.isEmpty()) {
                System.out.println("Fields present in first JSON but not in second JSON at path " + currentPath + ": " + fieldNames1);
            }
            fieldNames1.clear();
            fieldNames1.addAll(originalFieldNames1);

            fieldNames2.removeAll(fieldNames1);
            if (!fieldNames2.isEmpty()) {
                System.out.println("Fields present in second JSON but not in first JSON at path " + currentPath + ": " + fieldNames2);
            }

            objectNode1.fieldNames().forEachRemaining(fieldName -> {
                JsonNode fieldNode1 = objectNode1.get(fieldName);
                JsonNode fieldNode2 = objectNode2.get(fieldName);

                String fieldPath = currentPath + "/" + fieldName;
                compareJsonNodes(fieldNode1, fieldNode2, fieldPath);
            });
        } else if (node1.isArray() && node2.isArray()) {
            ArrayNode arrayNode1 = (ArrayNode) node1;
            ArrayNode arrayNode2 = (ArrayNode) node2;

            if (arrayNode1.size() != arrayNode2.size()) {
                System.out.println("Difference: Array size mismatch at path " + currentPath);
                return;
            }

            for (int i = 0; i < arrayNode1.size(); i++) {
                compareJsonNodes(arrayNode1.get(i), arrayNode2.get(i), currentPath + "[" + i + "]");
            }
        } else {
            softAssert.fail(currentPath + ": expected " + node1 + " but get " + node2);
        }
    }

}













import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

public class JSONManipulationExample {
    public static void main(String[] args) throws Exception {
        // The JSON string (can be either a JSON object or a JSON array)
        String jsonString = "{\"id\": 5, \"name\": \"John\", \"tags\": [\"tag1\", \"tag2\"]}";

        // Key path and new value
        String keyPath = "name";
        String newValue = "Doe";

        // Parse the JSON string
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(jsonString);

        // Update the value at the specified key path
        boolean success = updateValue(jsonNode, keyPath, newValue);

        // Convert the modified JSON back to a string
        if (success) {
            String modifiedJsonString = objectMapper.writeValueAsString(jsonNode);
            System.out.println(modifiedJsonString);
        } else {
            System.out.println("Failed to update the value at the specified key path.");
        }
    }

    private static boolean updateValue(JsonNode jsonNode, String keyPath, String newValue) {
        String[] keys = keyPath.split("\\.");
        JsonNode currentNode = jsonNode;

        for (int i = 0; i < keys.length - 1; i++) {
            String key = keys[i];

            if (currentNode.isObject()) {
                ObjectNode objectNode = (ObjectNode) currentNode;

                if (!objectNode.has(key)) {
                    return false; // Key path does not exist
                }

                currentNode = objectNode.get(key);
            } else if (currentNode.isArray()) {
                ArrayNode arrayNode = (ArrayNode) currentNode;

                int index = parseArrayIndex(keys[i]);
                if (index < 0 || index >= arrayNode.size()) {
                    return false; // Invalid array index
                }

                currentNode = arrayNode.get(index);
            } else {
                return false; // Key path is invalid
            }
        }

        if (currentNode instanceof ObjectNode) {
            ObjectNode objectNode = (ObjectNode) currentNode;
            String lastKey = keys[keys.length - 1];

            if (!objectNode.has(lastKey)) {
                return false; // Key path does not exist
            }

            objectNode.put(lastKey, newValue);
            return true;
        } else if (currentNode instanceof ArrayNode) {
            ArrayNode arrayNode = (ArrayNode) currentNode;
            int index = parseArrayIndex(keys[keys.length - 1]);

            if (index < 0 || index >= arrayNode.size()) {
                return false; // Invalid array index
            }

            arrayNode.set(index, newValue);
            return true;
        } else {
            return false; // Value at the specified key path is not an object or an array
        }
    }

    private static int parseArrayIndex(String key) {
        try {
            return Integer.parseInt(key);
        } catch (NumberFormatException e) {
            return -1;
        }
    }
}

In this updated code, the jsonNode can be either a JSON object or a JSON array. The updateValue method is modified to handle both cases.

When updating a value in a JSON object, it follows the same logic as before. If the current node is an ObjectNode, the value at the specified key path is updated using objectNode.put(lastKey, newValue).

When updating a value in a JSON array, it checks if the current node is an ArrayNode. If it is, it retrieves the array index from the last key in the keys array and verifies that it is valid. If the index is valid, it updates the value at that index using arrayNode.set(index, newValue).

Please note that the code assumes you have the Jackson library (ObjectMapper) imported and available in your project.





import com.google.gson.Gson;
import com.jayway.jsonpath.Configuration;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Option;
import org.json.JSONException;
import org.testng.annotations.Test;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;



String json1 = new String(Files.readAllBytes(Paths.get("src/test/java/petStore/testsBase/json2.json")));

        // Configure JsonPath to preserve the map structure
        Configuration configuration = Configuration.defaultConfiguration().addOptions(Option.DEFAULT_PATH_LEAF_TO_NULL);

        // Parse the JSON
        Map<String, Object> document = JsonPath.using(configuration).parse(json1).read("$");

        // Extract the "ddd" JSONObject using JsonPath
        Object dddObject = JsonPath.using(configuration).parse(json1).read("$.tags");

        // Convert the "ddd" JSONObject to a valid JSON string using Gson
        Gson gson = new Gson();
        String dddJsonString = gson.toJson(dddObject);

        // Print the "ddd" JSONObject as a valid JSON string
        System.out.println(dddJsonString);
